import re
from decimal import Decimal
import config
import decimal
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from loader import bot, cryptopay
import aiosqlite
import random
import hashlib
from datetime import datetime

m = lambda num: decimal.Decimal(f"{num}")

   
def is_float(s):
    if re.match("^\d+?\.\d+?$", s) is None:
        return s.isdigit()
    return True


async def get_user_balance(user_id):
    async with aiosqlite.connect('database.sqlite') as db:
        async with db.cursor() as cursor:
            await cursor.execute("SELECT balance FROM user WHERE user_id=?", (user_id,))
            result = await cursor.fetchone()
            return result[0] if result else None

async def update_user_balance(user_id, new_balance):
    async with aiosqlite.connect('database.sqlite') as db:
        async with db.cursor() as cursor:
            await cursor.execute("UPDATE user SET balance=? WHERE user_id=?", (new_balance, user_id))
            await db.commit()

async def lose_notify(msg: str, photo: str, zalupa : float, user_id: str):
    datatest = Decimal(zalupa)
    sobaka = datatest * Decimal('0.04')
    sobaka_str = str(sobaka.quantize(Decimal('0.00')))  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–æ –≤—Å–µ–≥–¥–∞ –∏–º–µ–ª–æ –¥–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

    current_time = datetime.now().isoformat()
    hash_input = f"{user_id}{zalupa}{current_time}".encode('utf-8')
    hash_object = hashlib.sha256(hash_input)
    hash_hex = hash_object.hexdigest()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_balance = await get_user_balance(user_id)
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω None, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ä–∞–≤–Ω—ã–º 0
    if current_balance is None:
        current_balance = '0'
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å, –¥–æ–±–∞–≤–ª—è—è –∫—ç—à–±–µ–∫
    new_balance = Decimal(current_balance) + sobaka
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_balance(user_id, str(new_balance))

    return await bot.send_photo(
    config.CHANNEL_ID,
    photo,
    f"<b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>\n\n"
    "<blockquote>"
    "–ü–æ–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É —Å–Ω–æ–≤–∞!\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö!"
    "</blockquote>\n\n"
    f"<b>‚Ä¢ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±–µ–∫ {sobaka_str} $ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.</b>\n\n"
    f"–•—ç—à –∏–≥—Ä—ã: <code> {hash_hex} </code>\n\n"
    f'<a href="{config.FAQ_LINK}">–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É?</a> | '
    f'<a href="{config.SUPPORT_LINK}">–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a> | '
    f'<a href="{config.RULES_LINK}">–ü—Ä–∞–≤–∏–ª–∞</a> | '
    f'<a href="{config.NEWS_LINK}">–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>',
    reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                "‚ö°Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
                config.INVOICE_LINK
            )],
        ]
    )
)


async def win_notify(sum: float, msg: str, photo: str):
    sum = round(sum, 2)
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞
    hash_input = f"{sum}{msg}".encode('utf-8')
    hash_object = hashlib.sha256(hash_input)
    hash_hex = hash_object.hexdigest()
    return await bot.send_photo(
        config.CHANNEL_ID,
        photo,
        f"<b>–ü–æ–±–µ–¥–∞! {msg}\n\n"
        "<blockquote>"
        f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω –≤—ã–∏–≥—Ä—ã—à {sum} $.\n"
        "–û–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É —Å–ø–æ–ª–Ω–∞ –∏ –ø–æ–∑–Ω–∞–π—Ç–µ –ø—É—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∂–∏–∑–Ω–∏!"
        "</blockquote>\n\n"
        f"–•—ç—à –∏–≥—Ä—ã: <code> {hash_hex} </code>\n\n"
        f'<a href="{config.FAQ_LINK}">–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É?</a> |'
        f'<a href="{config.SUPPORT_LINK}">–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a> | '
        f'<a href="{config.NEWS_LINK}">–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a></b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    "‚ö°Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
                    config.INVOICE_LINK
                )],
            ]
        )
    )

async def nic_notify(msg: str, photo: str, bid: float, user_id: str):
    bids = Decimal(bid)
    bidchlen = round(bid * 0.93, 2)
    current_time = datetime.now().isoformat()
    hash_input = f"{user_id}{msg}{current_time}".encode('utf-8')
    hash_object = hashlib.sha256(hash_input)
    hash_hex = hash_object.hexdigest()
    return await bot.send_photo(
        config.CHANNEL_ID,
        photo,
        f"<b>–ù–∏—á—å—è!\n\n"
        "<blockquote>"
        f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å CryptoBot –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã {bidchlen} $ (–∫–æ–º–∏—Å—Å–∏—è 7%) \n"
        "–û–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É —Å–ø–æ–ª–Ω–∞ –∏ –ø–æ–∑–Ω–∞–π—Ç–µ –ø—É—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∂–∏–∑–Ω–∏!"
        "</blockquote>\n\n"
        f"–•—ç—à –∏–≥—Ä—ã: <code> {hash_hex} </code>\n\n"
        f'<a href="{config.FAQ_LINK}">–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É?</a> |'
        f'<a href="{config.SUPPORT_LINK}">–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a> | '
        f'<a href="{config.NEWS_LINK}">–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a></b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    "‚ö°Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
                    config.INVOICE_LINK
                )],
            ]
        )
    )

async def draw_notify(msg: str, photo: str):
    return await bot.send_photo(
        config.CHANNEL_ID,
        photo,
        f"<b>–ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å.</b>\n"
        f'<a href="{config.FAQ_LINK}">–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É?</a> |'
        f'<a href="{config.SUPPORT_LINK}">–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a> | '
        f'<a href="{config.RULES_LINK}">–ü—Ä–∞–≤–∏–ª–∞</a> | '
        f'<a href="{config.NEWS_LINK}">–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    "‚ö°Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
                    config.INVOICE_LINK
                )],
            ]
        )
    )


def parse_data(msg: Message) -> dict[str, int | str]:
    try:
        user_id = msg.entities[0].user.id
        name = msg.entities[0].user.first_name
        bid_text = re.search(r'\(\$(.*?)\)', msg.text.split('\n')[0].split()[-1])
        bid = float(bid_text.group(1)) if bid_text else 0.0
        comment = ' '.join(msg.text.split('\n')[-1].split()[1::]).lower()
        
        return {
            "user_id": user_id,
            "name": name,
            "bid": bid,
            "comment": comment
        }
    except (AttributeError, IndexError, ValueError):
        return {}


async def notify_bid(data: dict, game):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(
            "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
            callback_data=f"access_{game.id}"
        ),
        InlineKeyboardButton(
            "üòà –°–∫–∞–º–Ω—É—Ç—å—Å—è",
            callback_data=f"scam_{game.id}"
        )
    )

    await bot.send_message(
        config.ADMIN_ID,
        f"<b>–ù–∏–∫: {data['name']}\n"
        f"–°—É–º–º–∞ —Å–∫–∞–º–∞: {data['bid']} $</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
